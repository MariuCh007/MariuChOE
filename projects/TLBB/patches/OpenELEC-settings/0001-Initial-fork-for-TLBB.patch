From 4e184a205fef499465523e94dcd12472c47e8b56 Mon Sep 17 00:00:00 2001
From: totalrevolution <info@totalrevolution.tv>
Date: Thu, 8 Oct 2015 15:07:21 +0100
Subject: [PATCH 1/3] Initial fork for TLBB

---
 src/downloader.py | 35 +++++++++++++++++++++
 src/extract.py    | 38 ++++++++++++++++++++++
 src/oe.py         | 94 ++++++++++++++++++++++++++++++++++++++++++++++---------
 src/service.py    | 58 +++++++++++++++++++++++++++++++++-
 4 files changed, 210 insertions(+), 15 deletions(-)
 create mode 100644 src/downloader.py
 create mode 100644 src/extract.py

diff --git a/src/downloader.py b/src/downloader.py
new file mode 100644
index 0000000..dd477ea
--- /dev/null
+++ b/src/downloader.py
@@ -0,0 +1,35 @@
+import xbmcgui
+import urllib
+import time
+
+def download(url, dest, dp = None):
+    print '################ Downloading ###################'
+    print"Download URL: "+url
+    print"Saving to: "+dest
+    if not dp:
+        dp = xbmcgui.DialogProgress()
+        dp.create("Keyword Installer","Downloading & Copying File",' ', ' ')
+    dp.update(0)
+    start_time=time.time()
+    urllib.urlretrieve(url, dest, lambda nb, bs, fs: _pbhook(nb, bs, fs, dp, start_time))
+     
+def _pbhook(numblocks, blocksize, filesize, dp, start_time):
+        try: 
+            percent = min(numblocks * blocksize * 100 / filesize, 100) 
+            currently_downloaded = float(numblocks) * blocksize / (1024 * 1024) 
+            kbps_speed = numblocks * blocksize / (time.time() - start_time) 
+            if kbps_speed > 0: 
+                eta = (filesize - numblocks * blocksize) / kbps_speed 
+            else: 
+                eta = 0 
+            kbps_speed = kbps_speed / 1024 
+            total = float(filesize) / (1024 * 1024) 
+            mbs = '%.02f MB of %.02f MB' % (currently_downloaded, total) 
+            e = 'Speed: %.02f Kb/s ' % kbps_speed 
+            e += 'ETA: %02d:%02d' % divmod(eta, 60) 
+            dp.update(percent, mbs, e)
+        except: 
+            percent = 100 
+            dp.update(percent) 
+        if dp.iscanceled(): 
+            dp.close() 
diff --git a/src/extract.py b/src/extract.py
new file mode 100644
index 0000000..1dfc596
--- /dev/null
+++ b/src/extract.py
@@ -0,0 +1,38 @@
+import zipfile
+
+def all(_in, _out, dp=None):
+    if dp:
+        return allWithProgress(_in, _out, dp)
+
+    return allNoProgress(_in, _out)
+        
+
+def allNoProgress(_in, _out):
+    try:
+        zin = zipfile.ZipFile(_in, 'r')
+        zin.extractall(_out)
+    except Exception, e:
+        print str(e)
+        return False
+
+    return True
+
+
+def allWithProgress(_in, _out, dp):
+
+    zin = zipfile.ZipFile(_in,  'r')
+
+    nFiles = float(len(zin.infolist()))
+    count  = 0
+
+    try:
+        for item in zin.infolist():
+            count += 1
+            update = count / nFiles * 100
+            dp.update(int(update))
+            zin.extract(item, _out)
+    except Exception, e:
+        print str(e)
+        return False
+
+    return True
\ No newline at end of file
diff --git a/src/oe.py b/src/oe.py
index 52a0010..bc79e93 100644
--- a/src/oe.py
+++ b/src/oe.py
@@ -41,23 +41,27 @@ import subprocess
 import dbus
 import dbus.mainloop.glib
 import defaults
+import extract
+import downloader
 
 from xml.dom import minidom
 
-__author__ = 'OpenELEC'
-__scriptid__ = 'service.openelec.settings'
-__addon__ = xbmcaddon.Addon(id=__scriptid__)
-__cwd__ = __addon__.getAddonInfo('path')
-__oe__ = sys.modules[globals()['__name__']]
-__media__ = '%s/resources/skins/Default/media' % __cwd__
-
-is_service = False
-conf_lock = False
-__busy__ = 0
+__author__    = 'OpenELEC'
+__scriptid__  = 'service.openelec.settings'
+__addon__     = xbmcaddon.Addon(id=__scriptid__)
+__cwd__       = __addon__.getAddonInfo('path')
+__oe__        = sys.modules[globals()['__name__']]
+__media__     = '%s/resources/skins/Default/media' % __cwd__
+
+dp            = xbmcgui.DialogProgress()
+dialog        = xbmcgui.Dialog()
+is_service    = False
+conf_lock     = False
+__busy__      = 0
 xbmcIsPlaying = 0
 input_request = False
-dictModules = {}
-listObject = {
+dictModules   = {}
+listObject    = {
     'list': 1100,
     'netlist': 1200,
     'btlist': 1300,
@@ -481,10 +485,43 @@ def openWizard():
         winOeMain = oeWindows.wizard('wizard.xml', __cwd__, 'Default', oeMain=__oe__)
         winOeMain.doModal()
         winOeMain = oeWindows.mainWindow('mainWindow.xml', __cwd__, 'Default', oeMain=__oe__)  # None
+        AfterWizard()
     except Exception, e:
         xbmc.executebuiltin('Dialog.Close(busydialog)')
         dbg_log('oe::openWizard', 'ERROR: (' + repr(e) + ')')
 
+def AfterWizard():
+    global winOeMain, __cwd__, __oe__
+    if not os.path.exists(firstrun):
+        try:
+            dp.create('Totally Revolutionising your box','Please wait...','')
+            downloader.download('http://thelittleblackbox.com/frun/frun_cube.zip', firstrunzip, dp)
+            dp.close()
+            dp.create('Installing Updates','Please wait...','')
+            extract.all(firstrunzip,'/storage',dp)
+#            while xbmc.getCondVisibility("Window.IsActive(progressdialog)"):
+#                xbmc.sleep(1000)
+            dp.close()
+            os.makedirs(firstrun)
+            xbmc.executebuiltin( 'UpdateLocalAddons' )
+            xbmc.sleep(1000)
+            xbmc.executebuiltin( 'UpdateAddonRepos' )
+            xbmc.sleep(2000)
+            os.remove(firstrunzip)
+            try: os.system('killall XBMC')
+            except: pass
+            try: os.system('killall Kodi')
+            except: pass
+            try: os.system('killall -9 xbmc.bin')
+            except: pass
+            try: os.system('killall -9 kodi.bin')
+            except: pass
+        except:
+            dialog.ok('Update download failed','There was a problem trying to download the latest updates, please go to your settings and make sure you\'re connected. Once connected reboot and your update will download.')
+    try:
+        xbmc.executebuiltin('RunAddon(script.openwindow)')
+    except: 
+        pass
 
 def openConfigurationWindow():
     global winOeMain, __cwd__, __oe__, dictModules
@@ -776,23 +813,37 @@ def get_os_release():
             build,
             )
 
+def KILL_KODI():
+        print "############   try linux force close  #################"
+        try: os.system('killall XBMC')
+        except: pass
+        try: os.system('killall Kodi')
+        except: pass
+        try: os.system('killall -9 xbmc.bin')
+        except: pass
+        try: os.system('killall -9 kodi.bin')
+        except: pass
 
 minidom.Element.writexml = fixed_writexml
 
 ############################################################################################
 # Base Environment
 ############################################################################################
-
 os_release_data = get_os_release()
 DISTRIBUTION = os_release_data[0]
 VERSION = os_release_data[1]
 ARCHITECTURE = os_release_data[2]
 BUILD = os_release_data[3]
-DOWNLOAD_DIR = '/storage/downloads'
+DOWNLOAD_DIR = '/storage'
 XBMC_USER_HOME = os.environ.get('XBMC_USER_HOME', '/storage/.kodi')
 CONFIG_CACHE = os.environ.get('CONFIG_CACHE', '/storage/.cache')
 USER_CONFIG = os.environ.get('USER_CONFIG', '/storage/.config')
 TEMP = '%s/temp/' % XBMC_USER_HOME
+fun_orig = 'usr/xfiles/frun.zip'
+frun_bak = 'storage/.config/frun.zip'
+branding = 'media/BRANDING/BRANDING.zip'
+firstrun = 'storage/.config/firstrun'
+firstrunzip = os.path.join(DOWNLOAD_DIR,'updates.zip')
 winOeMain = oeWindows.mainWindow('mainWindow.xml', __cwd__, 'Default', oeMain=__oe__)
 if os.path.exists('/etc/machine-id'):
     SYSTEMID = load_file('/etc/machine-id')
@@ -803,8 +854,23 @@ else:
 
 try:
     configFile = '%s/userdata/addon_data/service.openelec.settings/oe_settings.xml' % XBMC_USER_HOME
+    if os.path.exists('/storage/killchk'):
+        os.rmdir('/storage/killchk')
+        xbmc.executebuiltin('Reboot')
     if not os.path.exists('%s/userdata/addon_data/service.openelec.settings' % XBMC_USER_HOME):
         os.makedirs('%s/userdata/addon_data/service.openelec.settings' % XBMC_USER_HOME)
+        try:
+            extract.all(frun_orig,'/storage')
+        except:
+            try:
+                extract.all(frun_bak,'/storage')
+            except: pass
+    if os.path.exists(branding):
+        try:
+            extract.all(branding,'/storage')
+            dialog.ok('SUCCESS','OpenELEC Branding successfully copied to device.')
+        except:
+            dialog.ok('FAILED!!!','Failed to copy OpenELEC Branding to device!!!')
     if not os.path.exists('%s/services' % CONFIG_CACHE):
         os.makedirs('%s/services' % CONFIG_CACHE)
 except:
diff --git a/src/service.py b/src/service.py
index 20fe0e6..126a926 100644
--- a/src/service.py
+++ b/src/service.py
@@ -33,6 +33,10 @@ import threading
 import socket
 import os
 import xbmcaddon
+import urllib,urllib2,sys,re,xbmcplugin,xbmcgui,xbmcaddon,xbmc,os,binascii,shutil
+#import socket, fcntl, struct
+import downloader
+import extract
 
 
 class service_thread(threading.Thread):
@@ -107,13 +111,65 @@ class cxbmcm(xbmc.Monitor):
     def onAbortRequested(self):
         pass
 
+def wait_for_video():
+    isplaying = xbmc.Player().isPlaying()
+    if isplaying == 1:
+        xbmc.sleep(500)
+        print"Video Playing: Delay 1000ms"
+        wait_for_video()
+        
+def Update_Check():
+    print"######## UPDATE CHECK IN PLACE #########"
+    ADDON = xbmcaddon.Addon(id='plugin.program.webinstaller')
+    AddonID      =  'plugin.program.webinstaller'
+    ADDONS       =  xbmc.translatePath(os.path.join('special://home','addons',''))
+    dialog       =  xbmcgui.Dialog()
+    dp           =  xbmcgui.DialogProgress()
+    restore_dir  = '/storage/.restore'
+    backup_dir   = '/storage/backup/'
+    path         =  xbmc.translatePath(os.path.join('special://home/addons','packages'))
+    checkurlraw='687474703a2f2f746f74616c78626d632e636f6d2f746f74616c7265766f6c7574696f6e2f636865636b5f54525f776562696e7374616c6c65722e747874'
+    checkurl = binascii.unhexlify(checkurlraw)
+    addonxml = xbmc.translatePath(os.path.join(ADDONS,AddonID,'addon.xml'))    
+    localaddonversion = open(addonxml, mode='r')
+    content = file.read(localaddonversion)
+    file.close(localaddonversion)
+    localaddonvermatch = re.compile('check="1" version="(.+?)"').findall(content)
+    addonversion  = localaddonvermatch[0] if (len(localaddonvermatch) > 0) else '1.0'
+    print"######## LOCAL VERSION : "+addonversion
+    if not os.path.exists(path):
+        os.makedirs(path)
+    try:
+        link = Open_URL(checkurl)
+        urlversionmatch = re.compile('version="(.+?)"').findall(link)
+        urlzipmatch = re.compile('url="(.+?)"').findall(link)
+        urlversion  = urlversionmatch[0] if (len(urlversionmatch) > 0) else '1.0'
+        urlzip  = urlzipmatch[0] if (len(urlzipmatch) > 0) else ''
+        if urlversion > addonversion:
+            print"Downloading newer version"
+            downloader.download(urlzip, path+'/plugin.program.webinstaller.zip', dp)
+            Extract_all(path+'/plugin.program.webinstaller.zip', ADDONS, dp)
+            time.sleep(1)
+            xbmc.executebuiltin( 'UpdateLocalAddons' )
+        else: print"###########  No update required, local version is: "+addonversion+" and online is: "+urlversion
+    except: pass
+    if os.path.exists(path+'/plugin.program.webinstaller.zip'):
+        os.remove(path+'/plugin.program.webinstaller.zip')
+    
+def Open_URL(url):
+    req = urllib2.Request(url)
+    req.add_header('User-Agent','Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
+    response = urllib2.urlopen(req)
+    link     = response.read()
+    response.close()
+    return link.replace('\r','').replace('\n','').replace('\t','')
 
 xbmcm = cxbmcm()
 oe.load_modules()
 oe.start_service()
+wait_for_video()
 monitor = service_thread(oe.__oe__)
 monitor.start()
-
 xbmcm.waitForAbort()
 
 if hasattr(oe, 'winOeMain'):
-- 
1.9.1

